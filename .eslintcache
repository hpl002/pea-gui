[{"/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/index.js":"1","/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/components/wizard.js":"2","/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/components/nav.js":"3","/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/components/Stars.js":"4","/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/components/Plugs.js":"5","/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/reportWebVitals.js":"6"},{"size":591,"mtime":1608132184886,"results":"7","hashOfConfig":"8"},{"size":6289,"mtime":1608132243754,"results":"9","hashOfConfig":"8"},{"size":594,"mtime":1608131998473,"results":"10","hashOfConfig":"8"},{"size":363,"mtime":1608118197721,"results":"11","hashOfConfig":"8"},{"size":405,"mtime":1608124386887,"results":"12","hashOfConfig":"8"},{"size":362,"mtime":1608117560789,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1miwhq5",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/index.js",[],"/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/components/wizard.js",["27"],"import React, { Fragment, useState, useEffect } from 'react';\nimport StepWizard from 'react-step-wizard';\n\nimport Nav from './nav';\nimport Plugs from './Plugs';\n\nimport styles from '../scss/wizard.module.scss';\nimport transitions from '../scss/transitions.module.scss';\n/* eslint react/prop-types: 0 */\n\n/**\n * A basic demonstration of how to use the step wizard\n */\nconst Wizard = () => {\n    const [state, updateState] = useState({\n        form: {},\n        transitions: {\n            enterRight: `${transitions.animated} ${transitions.enterRight}`,\n            enterLeft: `${transitions.animated} ${transitions.enterLeft}`,\n            exitRight: `${transitions.animated} ${transitions.exitRight}`,\n            exitLeft: `${transitions.animated} ${transitions.exitLeft}`,\n            intro: `${transitions.animated} ${transitions.intro}`,\n        },\n        // demo: true, // uncomment to see more\n    });\n\n    const updateForm = (key, value) => {\n        const { form } = state;\n\n        form[key] = value;\n        updateState({\n            ...state,\n            form,\n        });\n    };\n\n    // Do something on step change\n    const onStepChange = (stats) => {\n        // console.log(stats);\n    };\n\n    const setInstance = SW => updateState({\n        ...state,\n        SW,\n    });\n\n    const { SW, demo } = state;\n\n    return (\n        <div className='container'>\n            <h3>React Step Wizard</h3>\n            <div className={'jumbotron'}>\n                <div className='row'>\n                    <div className={`col-12 col-sm-6 offset-sm-3 ${styles['rsw-wrapper']}`}>\n                        <StepWizard\n                            onStepChange={onStepChange}\n                            isHashEnabled\n                            transitions={state.transitions} // comment out for default transitions\n                            nav={<Nav />}\n                            instance={setInstance}\n                        >\n                            <First hashKey={'FirstStep'} update={updateForm} />\n                            <Second form={state.form} />\n                            <Progress />\n                            {null /* will be ignored */}\n                            <Last hashKey={'TheEnd!'} />\n                        </StepWizard>\n                    </div>\n                </div>\n            </div>\n            { (demo && SW) && <InstanceDemo SW={SW} /> }\n        </div>\n    );\n};\n\nexport default Wizard;\n\n/** Demo of using instance */\nconst InstanceDemo = ({ SW }) => (\n    <Fragment>\n        <h4>Control from outside component</h4>\n        <button className={'btn btn-secondary'} onClick={SW.previousStep}>Previous Step</button>\n        &nbsp;\n        <button className={'btn btn-secondary'} onClick={SW.nextStep}>Next Step</button>\n    </Fragment>\n);\n\n/**\n * Stats Component - to illustrate the possible functions\n * Could be used for nav buttons or overview\n */\nconst Stats = ({\n    currentStep,\n    firstStep,\n    goToStep,\n    lastStep,\n    nextStep,\n    previousStep,\n    totalSteps,\n    step,\n}) => (\n    <div>\n        <hr />\n        { step > 1 &&\n            <button className='btn btn-default btn-block' onClick={previousStep}>Go Back</button>\n        }\n        { step < totalSteps ?\n            <button className='btn btn-primary btn-block' onClick={nextStep}>Continue</button>\n            :\n            <button className='btn btn-success btn-block' onClick={nextStep}>Finish</button>\n        }\n        <hr />\n        <div style={{ fontSize: '21px', fontWeight: '200' }}>\n            <h4>Other Functions</h4>\n            <div>Current Step: {currentStep}</div>\n            <div>Total Steps: {totalSteps}</div>\n            <button className='btn btn-block btn-default' onClick={firstStep}>First Step</button>\n            <button className='btn btn-block btn-default' onClick={lastStep}>Last Step</button>\n            <button className='btn btn-block btn-default' onClick={() => goToStep(2)}>Go to Step 2</button>\n        </div>\n    </div>\n);\n\n/** Steps */\n\nconst First = props => {\n    const update = (e) => {\n        props.update(e.target.name, e.target.value);\n    };\n\n    return (\n        <div>\n            <h3 className='text-center'>Welcome! Have a look around!</h3>\n\n            <label>First Name</label>\n            <input type='text' className='form-control' name='firstname' placeholder='First Name'\n                onChange={update} />\n            <Stats step={1} {...props} />\n        </div>\n    );\n};\n\nconst Second = props => {\n    const validate = () => {\n        if (confirm('Are you sure you want to go back?')) { // eslint-disable-line\n            props.previousStep();\n        }\n    };\n\n    return (\n        <div>\n            { props.form.firstname && <h3>Hey {props.form.firstname}! ðŸ‘‹</h3> }\n            I have added validation to the previous button.\n            <Stats step={2} {...props} previousStep={validate} />\n        </div>\n    );\n};\n\nconst Progress = (props) => {\n    const [state, updateState] = useState({\n        isActiveClass: '',\n        timeout: null,\n    });\n\n    useEffect(() => {\n        const { timeout } = state;\n\n        if (props.isActive && !timeout) {\n            updateState({\n                isActiveClass: styles.loaded,\n                timeout: setTimeout(() => {\n                    props.nextStep();\n                }, 3000),\n            });\n        } else if (!props.isActive && timeout) {\n            clearTimeout(timeout);\n            updateState({\n                isActiveClass: '',\n                timeout: null,\n            });\n        }\n    });\n\n    return (\n        <div className={styles['progress-wrapper']}>\n            <p className='text-center'>Automated Progress...</p>\n            <div className={`${styles.progress} ${state.isActiveClass}`}>\n                <div className={`${styles['progress-bar']} progress-bar-striped`} />\n            </div>\n        </div>\n    );\n};\n\nconst Last = (props) => {\n    const submit = () => {\n        alert('You did it! Yay!') // eslint-disable-line\n    };\n\n    return (\n        <div>\n            <div className={'text-center'}>\n                <h3>This is the last step in this example!</h3>\n                <hr />\n                <Plugs />\n            </div>\n            <Stats step={4} {...props} nextStep={submit} />\n        </div>\n    );\n};\n","/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/components/nav.js",[],"/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/components/Stars.js",[],"/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/components/Plugs.js",[],"/Users/hermanplatou/code/private/Masters/containers/pea-gui/client/src/reportWebVitals.js",[],{"ruleId":"28","severity":1,"message":"29","line":38,"column":27,"nodeType":"30","messageId":"31","endLine":38,"endColumn":32},"no-unused-vars","'stats' is defined but never used.","Identifier","unusedVar"]